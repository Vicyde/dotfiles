#+TITLE: Emacs configuration file 
#+AUTHOR: Jasper Reuhman
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Table of contents :toc:
- [[#plug-in-manager][PLUG-IN MANAGER]]
  - [[#elpaca][Elpaca]]
- [[#plugins][PLUGINS]]
  - [[#dashboard][Dashboard]]
  - [[#evil-mode][Evil-mode]]
  - [[#general][General]]
  - [[#ivy][Ivy]]
  - [[#magit][Magit]]
  - [[#which-key][Which Key]]
- [[#org-mode][ORG Mode]]
  - [[#table-of-contents][Table of Contents]]
  - [[#nicer-bullets][Nicer bullets]]
  - [[#source-code-block-expansion][Source Code Block expansion]]
  - [[#org-roam][ORG Roam]]
- [[#theme][Theme]]
  - [[#transparency][Transparency]]
  - [[#add-all-the-icons][Add all the icons]]
  - [[#color-theme][Color theme]]
- [[#general-emacs-settings][General Emacs settings]]

* PLUG-IN MANAGER 
** Elpaca
#+begin_src emacs-lisp
    (defvar elpaca-installer-version 0.11)
    (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
    (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
    (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
    (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
    				    :ref nil :depth 1 :inherit ignore
    				    :files (:defaults "elpaca-test.el" (:exclude "extensions"))
    				    :build (:not elpaca--activate-package)))
    (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
    	    (build (expand-file-name "elpaca/" elpaca-builds-directory))
    	    (order (cdr elpaca-order))
	    (default-directory repo))
	(add-to-list 'load-path (if (file-exists-p build) build repo))
    	(unless (file-exists-p repo)
    	(make-directory repo t)
    	(when (<= emacs-major-version 28) (require 'subr-x))
    	(condition-case-unless-debug err
    	    (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
    			((zerop (apply #'call-process `("git" nil ,buffer t "clone"
    							,@(when-let* ((depth (plist-get order :depth)))
    							    (list (format "--depth=%d" depth) "--no-single-branch"))
    							,(plist-get order :repo) ,repo))))
    			((zerop (call-process "git" nil buffer t "checkout"
    					    (or (plist-get order :ref) "--"))))
    			(emacs (concat invocation-directory invocation-name))
    			((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
    					    "--eval" "(byte-recompile-directory \".\" 0 'force)")))
    			((require 'elpaca))
    			((elpaca-generate-autoloads "elpaca" repo)))

    		(progn (message "%s" (buffer-string)) (kill-buffer buffer))
    		(error "%s" (with-current-buffer buffer (buffer-string))))
    	    ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    	(unless (require 'elpaca-autoloads nil t)
    	(require 'elpaca)
    	(elpaca-generate-autoloads "elpaca" repo)
    	(load "./elpaca-autoloads")))
    (add-hook 'after-init-hook #'elpaca-process-queues)
    (elpaca `(,@elpaca-order))

    (elpaca elpaca-use-package
    (elpaca-use-package-mode))

#+end_src

* PLUGINS
** Dashboard
#+begin_src emacs-lisp 
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook))
#+end_src

** Evil-mode 

Because VIM-keys are just better!

#+begin_src emacs-lisp
  (use-package evil
  :ensure t
  :demand t
  :init
  (setq evil-want-C-i-jump nil)
  (evil-mode))
#+end_src

** General
#+begin_src emacs-lisp
  (use-package general
  :ensure t
  :demand t
  :config
  (general-evil-setup)

  (general-create-definer jr/leader-keys
    :states '(normal insert visual emacs)
    :keymap 'override
    :prefix "SPC"
    :global-prefix "M-SPC")

  (jr/leader-keys
   "." '(find-file :wk "Find file"))
  )
#+end_src

** Ivy
#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :bind
    (("C-c C-r" . ivy-resume)
     ("C-x B" . ivy-switch-buffer-other-window))
    :custom
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    :config
    (ivy-mode))

  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))

  (use-package counsel
    :ensure t
    :after ivy
    :config (counsel-mode))

  (use-package ivy-rich
    :ensure t
    :after ivy
    :init (ivy-rich-mode 1)
    :custom
    (ivy-virtual-abbreviate 'full
     ivy-rich-switch-buffer-align-virtual-buffer t
     ivy-rich-path-style 'abbrev))
 #+end_src

** Magit

We also install transient here, since this is required by magit. The version shipped with
my emacs is older than required.

#+begin_src emacs-lisp
  (use-package transient
    :ensure t)

  (use-package magit
    :after transient
    :ensure t)
#+end_src

** Which Key
#+begin_src emacs-lisp 
  (use-package which-key
    :ensure t
    :config
    (which-key-mode 1))
#+end_src

* ORG Mode
org-mode specific plugins

** Table of Contents
#+begin_src emacs-lisp
  (use-package toc-org
  :ensure t
  :commands toc-org-enable
  :init
  (add-hook 'org-mode-hook 'toc-org-mode)
  )
#+end_src

** Nicer bullets
#+begin_src emacs-lisp
      (use-package org-bullets
        :ensure t
        :init
      (add-hook 'org-mode-hook (lambda() (org-bullets-mode 1))))
#+end_src

** Source Code Block expansion
#+begin_src emacs-lisp
    (require 'org-tempo)
#+end_src

** ORG Roam
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory "~/RoamNotes")
    :bind( ("C-c n l" . org-roam-buffer-toggle)
  	 ("C-c n f" . org-roam-node-find)
  	 ("C-c n i" . org-roam-node-insert))
    :config
    (org-roam-setup))
#+end_src

* Theme
** Transparency
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(alpha-background . 90))
#+end_src

** Add all the icons
#+begin_src emacs-lisp
  (use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

  (use-package all-the-icons-dired
  :ensure t
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

** Color theme
#+begin_src emacs-lisp
  (use-package doom-themes
  :ensure t
  :config
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  (load-theme 'doom-one t)

  (doom-themes-visual-bell-config)
  (doom-themes-org-config))
#+end_src

* General Emacs settings
#+begin_src emacs-lisp
  (setq backup-directory-alis '((".*" . "~/.local/share/Trash/files")))

  (setq inhibit-startup-screen t)

  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  (global-display-line-numbers-mode 1)
  (setq display-line-numbers-type 'relative)

  (global-visual-line-mode t)

  (set-face-attribute 'default nil
      :font "SpaceMono Nerd Font"
      :height 150
      :weight 'normal) 
#+end_src
